+--------------------------+
                                   |                CS 140                |
                     | PROJECT 2: USER PROGRAMS        |
                     |            DESIGN DOCUMENT             |
                     +--------------------------+


---- GROUP ----


>> Fill in the names and email addresses of your group members.


Omar Ahmed <email@domain.example>
Ali Ramadan <email@domain.example>
Aboelhamd ALy <email@domain.example>


---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


                           ARGUMENT PASSING
                           ================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


--None.


---- ALGORITHMS ----


>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


-- First, we break the command into words and place them in top of the stack in the right order and save their pointers in an array. Then we placed these saved pointers in the inverse order into the stack and a pointer to argv and argc and finally a null pointer as fake "return address".
--Any overflow will case a page fault error which will make the page fault handler terminate the current thread with exit code (-1).


---- RATIONALE ----


>> A3: Why does Pintos implement strtok_r() but not strtok()?


-- Because strtok_r() function is a reentrant version of strtok(), Where Reentrant version takes an extra argument, this argument is used to store state between calls instead of using a global variable. The strtok_r() function may also be used to nest two parsing loops within one another, as long as separate context pointers are used.
And can be used by multiple threads simultaneously.
While strtok() function use a global state , so if you call them from multiple threads, you are probably invoking undefined behavior. Your program could crash, or worse.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
--First advantage : The separation is done outside kernel in the user side, which simplifies the code written in the kernel side.
Second advantage : It protects the kernel from bad arguments (eg. very large data) that might cause problems to the kernel. While if done by the shell , the worst thing that can happen is the shell crashes.


                             SYSTEM CALLS
                             ============


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


--/*  struct for the thread (process) to contain information needed by its parent.*/
struct child_process
  {
    tid_t tid;                          /* Thread identifier. */
    struct thread *parent;                /* Pointer to its parent thread. */
    struct list_elem elem;                /* List element to handle list operations. */
    bool parent_iswaiting;                /* Is parent waiting for me ? */
    int exit_status;                        /* Status code when this child exits. */
    /* Semaphore to make parent wait for child until child exits.*/
    struct semaphore sema_child;
    /* Semaphore to make parent wait for child until child is loaded. */
    struct semaphore sync;
  };


    /* These attributes are added to thread struct */
    struct list fd_table;                /* List of fd of opened files. */
    struct list child_list;                /* List of child processes. */
    /* Child process struct , if this process is a child. */
    struct child_process *child_process;


    /* These attributes are added to file struct */
    int fd;                                /* Unique File Descriptor. */
    struct list_elem elem;      /* List element to handle list operations. */


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?


-- We added fd attribute to the file struct and an list element, we also added a list of (opened) files to each thread. 
File descriptors are generated randomly, The are supposed to be unique within a single process only. But Since we used randomness they are also considered unique within the entire OS.


---- ALGORITHMS ----


>> B3: Describe your code for reading and writing user data from the
>> kernel.


-- In read, if we are supposed to read from STDIN, we call input_getc
Otherwise, we get relevant file pointer using passed fd from the
file_list of current thread. Filesys (sync) lock is acquired,
filesys function file_read is called and then lock is released.
-In write, if we are supposed to write to STDOUT, we call putbuf.
Otherwise, we get relevant file pointer using passed fd from the
file_list of current thread. Filesys (sync) lock is acquired,
filesys function file_write is called and then lock is released.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


-- In both cases you need at least one call and at most two to pagedir_get_page()
because in either case the memory needed could lie entirely within a page
or it could overlap into the next one.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

-- wait will make the current thread to wait on the semaphore of his child 
using the pid of the child the when this child process terminate it will call
Semaphore up to wake its parent.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.


-- Any memory access will cause the page fault handler to check that this 
virtual user address is a valid address ( address is beyond the limits ) and if not
This will terminate the process and close every opened file and free any allocated
Memory.
An Example:
In write system call :
Our syscall handler first calls check_valid_add() on the esp pointer of the 
interrupt frame to check that the system call number is valid. Then it check
other parameter as well with the same function. And for the buffer pointer 
we use pagedir_get_page to convert the user virtual address to kernel one.


---- SYNCHRONIZATION ----


>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?


-- Any thread creates a child using “exec” will wait for it on a semaphore.
Then the new child process will try to load its executable file if it fails it will 
set its id to -1 and it wakes the parent in both cases (failure/success)
which will return the child process id.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?


-- Before C exits : P will wait on C semaphore on which C will wake him up.
After C exits : C will call semaphore up which will case P to continue 
immediately after calling semaphore down.
Resources are freed in both cases for Process C while terminating the process
in process_exit method.


---- RATIONALE ----


>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


-- For sake of simplicity and It’s recommended by the documentation.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?


--  Advantages : 
- We generate file descriptor in O(1) time using random method.
- Randomness assures that file descriptors are unique within a certain process.
- There is no limit (because of the list) on the number of open file descriptors (until we run out of memory).


Disadvantages :
- Accessing a file descriptor is O(n), where n is the number of file descriptors 
for the current thread (have to iterate through the entire fd list).


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?


-- We didn’t change it.


                           SURVEY QUESTIONS
                           ================


Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?


>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?


>> Any other comments?
